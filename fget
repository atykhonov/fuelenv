#!/usr/bin/env python

import argparse
import cStringIO
import glob
import inspect
import json
import logging
import math
import pycurl
import os
import sys
import urllib2


def download_artifact(url, filename):
    fp = open(filename, "wb")
    curl = pycurl.Curl()
    curl.setopt(pycurl.URL, url)
    curl.setopt(pycurl.WRITEDATA, fp)
    curl.setopt(pycurl.FOLLOWLOCATION, 1)
    curl.perform()
    curl.close()
    fp.close()


suffixes = ['B', 'K', 'M', 'G']

def human_size(nbytes):
    rank = int((math.log10(nbytes)) / 3)
    rank = min(rank, len(suffixes) - 1)
    human = nbytes / (1024.0 ** rank)
    f = ('%.2f' % human).rstrip('0').rstrip('.')
    return '%s%s' % (f, suffixes[rank])


def download_iso(url, filename):
    u = urllib2.urlopen(url)
    f = open(filename, 'wb')
    meta = u.info()
    file_size = int(meta.getheaders("Content-Length")[0])
    print "fget: Downloading: %s (%s)" % (
        os.path.basename(filename), human_size(file_size))

    file_size_dl = 0
    block_sz = 8192
    while True:
        buffer = u.read(block_sz)
        if not buffer:
            break

        file_size_dl += len(buffer)
        f.write(buffer)
        status = r"%10d  [%3.2f%%]" % (file_size_dl, file_size_dl * 100. / file_size)
        status = status + chr(8)*(len(status)+1)
        print status,

    f.close()


fuel_dir = os.path.expanduser(os.path.join('~', '.config', 'fuel'))
artifacts_dir = os.path.join(fuel_dir, 'artifacts')

if not os.path.isdir(artifacts_dir):
    os.makedirs(artifacts_dir)

parser = argparse.ArgumentParser(description='fuel artifacts downloader')
parser.add_argument('-j', '--job', help='Jenkins job')
parser.add_argument('-b', '--build', help='Jenkins build')
parser.add_argument(
    '-i', '--iso', action='store_true', help='Download iso-file')
parser.add_argument(
    '-r', '--url', required=True,
    dest='jenkins_url', help='Jenkins URL')
parser.add_argument('-u', '--username', help='Jenkins username')
parser.add_argument('-p', '--password', help='Jenkins password')
parser.add_argument(
    '-o', '--output', default=artifacts_dir,
    help='Output dir for the artifacts')

args = parser.parse_args()

url = args.jenkins_url.strip('/')
build = args.build if args.build else 'lastSuccessfulBuild'
url_template = "{0}/job/{1}/{2}/{3}"
build_url = url_template.format(url, args.job, build, 'api/json')
artifacts_url = url_template.format(url, args.job, build, 'artifact/{0}')

buf = cStringIO.StringIO()
c = pycurl.Curl()
c.setopt(c.URL, build_url)
c.setopt(c.WRITEFUNCTION, buf.write)
c.setopt(pycurl.FOLLOWLOCATION, 1)
c.perform()

jd = json.loads(buf.getvalue())
buf.close()
artifacts = jd['artifacts']

build_dir = os.path.join(artifacts_dir, jd['id'])
if not os.path.exists(build_dir):
    print "fget: Creating build directory %s" % (build_dir, )
    os.makedirs(build_dir)

print "fget: Downloading artifacts from Jenkins to {0}".format(build_dir)

for artifact in artifacts:
    artifact_url = artifacts_url.format(artifact['relativePath'])
    filename = os.path.join(build_dir, artifact['fileName'])
    print "fget: Downloading artifact: {0}".format(os.path.basename(filename))
    download_artifact(artifact_url, filename)

if args.iso:
    glob_path = os.path.join(build_dir, '*.iso.data.txt')
    for data_file in glob.glob(glob_path):
        with open(data_file) as f:
            for line in f.readlines():
                if 'HTTP_LINK' in line:
                    _, http_link = line.split('=')
                    http_link = http_link.strip()
                    filename = http_link.split('/')[-1]
                    print "fget: Downloading iso-file: {0}".format(filename)
                    output = os.path.join(build_dir, filename)
                    download_iso(http_link, output)

# TODO:
# - introduce main method
# 
